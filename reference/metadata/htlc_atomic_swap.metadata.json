{
  "metadataVersion": "0.1.0",
  "source": {
    "hash": "0x914a920a207f265712bcfde91cc29737c76b388be9d3b2a6ae6ff795c63e95b8",
    "language": "ink! 3.0.0-rc3",
    "compiler": "rustc 1.54.0-nightly"
  },
  "contract": {
    "name": "htlc-atomic-swap",
    "version": "3.0.0-rc3",
    "authors": [
      "Parity Technologies <admin@parity.io>"
    ]
  },
  "spec": {
    "constructors": [
      {
        "args": [],
        "docs": [
          "Creates a new ERC-20 contract with the specified initial supply."
        ],
        "name": [
          "new"
        ],
        "selector": "0x9bae9d5e"
      }
    ],
    "docs": [
      " Enables minting of coins"
    ],
    "events": [
      {
        "args": [
          {
            "docs": [
              " Ouput of the event"
            ],
            "indexed": false,
            "name": "output",
            "type": {
              "displayName": [
                "InitHTLCEventOutput"
              ],
              "type": 32
            }
          }
        ],
        "docs": [],
        "name": "InitHTLCEvent"
      },
      {
        "args": [
          {
            "docs": [
              " Ouput of the event"
            ],
            "indexed": false,
            "name": "output",
            "type": {
              "displayName": [
                "CreatedContractOutput"
              ],
              "type": 33
            }
          }
        ],
        "docs": [
          " Sent when a contract is created"
        ],
        "name": "CreatedContract"
      },
      {
        "args": [
          {
            "docs": [
              " Ouput of the event"
            ],
            "indexed": false,
            "name": "output",
            "type": {
              "displayName": [
                "ClaimFundsEventOutput"
              ],
              "type": 34
            }
          }
        ],
        "docs": [
          " ClaimFundsEvent is a payload of an event that is emitted when receiver claims his funds"
        ],
        "name": "ClaimFundsEvent"
      },
      {
        "args": [
          {
            "docs": [
              " Ouput of the event"
            ],
            "indexed": false,
            "name": "output",
            "type": {
              "displayName": [
                "RefundFundsEventOutput"
              ],
              "type": 35
            }
          }
        ],
        "docs": [
          " RefundFundsEvent is a payload of an event that is emitted when funds are being transferred from HTLC address",
          " to a receiver"
        ],
        "name": "RefundFundsEvent"
      }
    ],
    "messages": [
      {
        "args": [
          {
            "name": "proposal",
            "type": {
              "displayName": [
                "Proposal"
              ],
              "type": 18
            }
          }
        ],
        "docs": [
          " Generates a proposal for a new Hash-Time Locked Contract. Returns the unique id generated for the contract.",
          "",
          " * `from` - Address of the From (generator of the proposal)",
          " * `to` - Address of the receiver of the funds",
          " * `token` - Token for the transfer",
          " * `amount` - Amount of the transaction",
          " * `time_lock` - Time until that the contract expires",
          " * `secret_hash` - Hash of the secret of the HTLC"
        ],
        "mutates": true,
        "name": [
          "initialise_htlc"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Result"
          ],
          "type": 20
        },
        "selector": "0x0aa0dc95"
      },
      {
        "args": [
          {
            "name": "claim",
            "type": {
              "displayName": [
                "ClaimRequest"
              ],
              "type": 28
            }
          }
        ],
        "docs": [
          " Claim the funds if the secret key is correct"
        ],
        "mutates": true,
        "name": [
          "claim_funds"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Result"
          ],
          "type": 20
        },
        "selector": "0x081ece10"
      },
      {
        "args": [
          {
            "name": "refund",
            "type": {
              "displayName": [
                "RefundRequest"
              ],
              "type": 29
            }
          }
        ],
        "docs": [
          " Returns the funds to the sender if the time lock has expired"
        ],
        "mutates": true,
        "name": [
          "refund_funds"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Result"
          ],
          "type": 20
        },
        "selector": "0x46974847"
      },
      {
        "args": [
          {
            "name": "contract_hash",
            "type": {
              "displayName": [
                "Hash"
              ],
              "type": 4
            }
          }
        ],
        "docs": [
          " Returns information about the HTLC given the `contract_hash`"
        ],
        "mutates": false,
        "name": [
          "get_htlc_info"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Option"
          ],
          "type": 30
        },
        "selector": "0x0c0c1a7f"
      },
      {
        "args": [
          {
            "name": "owner",
            "type": {
              "displayName": [
                "AccountId"
              ],
              "type": 10
            }
          }
        ],
        "docs": [
          " Set the owner. May only be done by the current owner."
        ],
        "mutates": true,
        "name": [
          "set_owner"
        ],
        "payable": false,
        "returnType": {
          "displayName": [
            "Result"
          ],
          "type": 20
        },
        "selector": "0x367facd6"
      }
    ]
  },
  "storage": {
    "struct": {
      "fields": [
        {
          "layout": {
            "struct": {
              "fields": [
                {
                  "layout": {
                    "struct": {
                      "fields": [
                        {
                          "layout": {
                            "cell": {
                              "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
                              "ty": 1
                            }
                          },
                          "name": "header"
                        },
                        {
                          "layout": {
                            "struct": {
                              "fields": [
                                {
                                  "layout": {
                                    "cell": {
                                      "key": "0x0100000000000000000000000000000000000000000000000000000000000000",
                                      "ty": 2
                                    }
                                  },
                                  "name": "len"
                                },
                                {
                                  "layout": {
                                    "array": {
                                      "cellsPerElem": 1,
                                      "layout": {
                                        "cell": {
                                          "key": "0x0100000001000000000000000000000000000000000000000000000000000000",
                                          "ty": 3
                                        }
                                      },
                                      "len": 4294967295,
                                      "offset": "0x0200000000000000000000000000000000000000000000000000000000000000"
                                    }
                                  },
                                  "name": "elems"
                                }
                              ]
                            }
                          },
                          "name": "entries"
                        }
                      ]
                    }
                  },
                  "name": "keys"
                },
                {
                  "layout": {
                    "hash": {
                      "layout": {
                        "cell": {
                          "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
                          "ty": 8
                        }
                      },
                      "offset": "0x0100000001000000000000000000000000000000000000000000000000000000",
                      "strategy": {
                        "hasher": "Blake2x256",
                        "postfix": "",
                        "prefix": "0x696e6b20686173686d6170"
                      }
                    }
                  },
                  "name": "values"
                }
              ]
            }
          },
          "name": "contracts_by_hash"
        },
        {
          "layout": {
            "cell": {
              "key": "0x0200000001000000000000000000000000000000000000000000000000000000",
              "ty": 10
            }
          },
          "name": "owner"
        },
        {
          "layout": {
            "cell": {
              "key": "0x0300000001000000000000000000000000000000000000000000000000000000",
              "ty": 16
            }
          },
          "name": "nonce"
        }
      ]
    }
  },
  "types": [
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "last_vacant",
              "type": 2,
              "typeName": "Index"
            },
            {
              "name": "len",
              "type": 2,
              "typeName": "u32"
            },
            {
              "name": "len_entries",
              "type": 2,
              "typeName": "u32"
            }
          ]
        }
      },
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Header"
      ]
    },
    {
      "def": {
        "primitive": "u32"
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 7,
                  "typeName": "VacantEntry"
                }
              ],
              "name": "Vacant"
            },
            {
              "fields": [
                {
                  "type": 4,
                  "typeName": "T"
                }
              ],
              "name": "Occupied"
            }
          ]
        }
      },
      "params": [
        4
      ],
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "Entry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "type": 5,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "path": [
        "ink_env",
        "types",
        "Hash"
      ]
    },
    {
      "def": {
        "array": {
          "len": 32,
          "type": 6
        }
      }
    },
    {
      "def": {
        "primitive": "u8"
      }
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "next",
              "type": 2,
              "typeName": "Index"
            },
            {
              "name": "prev",
              "type": 2,
              "typeName": "Index"
            }
          ]
        }
      },
      "path": [
        "ink_storage",
        "collections",
        "stash",
        "VacantEntry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 9,
              "typeName": "V"
            },
            {
              "name": "key_index",
              "type": 2,
              "typeName": "KeyIndex"
            }
          ]
        }
      },
      "params": [
        9
      ],
      "path": [
        "ink_storage",
        "collections",
        "hashmap",
        "ValueEntry"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "secret_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "from",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "to",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "token",
              "type": 11,
              "typeName": "UniqueMultiToken"
            },
            {
              "name": "amount",
              "type": 16,
              "typeName": "Balance"
            },
            {
              "name": "time_lock",
              "type": 15,
              "typeName": "u64"
            },
            {
              "name": "locked",
              "type": 17,
              "typeName": "bool"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "storage",
        "HTLContract"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "type": 5,
              "typeName": "[u8; 32]"
            }
          ]
        }
      },
      "path": [
        "ink_env",
        "types",
        "AccountId"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "multi_token",
              "type": 12,
              "typeName": "MultiToken"
            },
            {
              "name": "token_id",
              "type": 14,
              "typeName": "Option<TokenId>"
            }
          ]
        }
      },
      "path": [
        "multi_token",
        "unique",
        "UniqueMultiToken"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account_id",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "standard",
              "type": 13,
              "typeName": "TokenStandard"
            }
          ]
        }
      },
      "path": [
        "multi_token",
        "MultiToken"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "discriminant": 0,
              "name": "Erc20"
            },
            {
              "discriminant": 1,
              "name": "Erc721"
            },
            {
              "discriminant": 2,
              "name": "Erc1155"
            }
          ]
        }
      },
      "path": [
        "contract_utils",
        "token",
        "TokenStandard"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None"
            },
            {
              "fields": [
                {
                  "type": 15,
                  "typeName": "T"
                }
              ],
              "name": "Some"
            }
          ]
        }
      },
      "params": [
        15
      ],
      "path": [
        "Option"
      ]
    },
    {
      "def": {
        "primitive": "u64"
      }
    },
    {
      "def": {
        "primitive": "u128"
      }
    },
    {
      "def": {
        "primitive": "bool"
      }
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "to",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "token",
              "type": 19,
              "typeName": "UniqueMultiTokenInfo"
            },
            {
              "name": "amount",
              "type": 16,
              "typeName": "Balance"
            },
            {
              "name": "time_lock",
              "type": 15,
              "typeName": "u64"
            },
            {
              "name": "secret_hash",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "input",
        "Proposal"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account_id",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "standard",
              "type": 13,
              "typeName": "TokenStandard"
            },
            {
              "name": "token_id",
              "type": 14,
              "typeName": "Option<TokenId>"
            }
          ]
        }
      },
      "path": [
        "multi_token",
        "unique",
        "UniqueMultiTokenInfo"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "fields": [
                {
                  "type": 21,
                  "typeName": "T"
                }
              ],
              "name": "Ok"
            },
            {
              "fields": [
                {
                  "type": 22,
                  "typeName": "E"
                }
              ],
              "name": "Err"
            }
          ]
        }
      },
      "params": [
        21,
        22
      ],
      "path": [
        "Result"
      ]
    },
    {
      "def": {
        "tuple": []
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidAccounts"
            },
            {
              "name": "ContractExpired"
            },
            {
              "fields": [
                {
                  "type": 4,
                  "typeName": "Hash"
                }
              ],
              "name": "ContractNotFound"
            },
            {
              "name": "EscrowAccountNotFound"
            },
            {
              "fields": [
                {
                  "type": 4,
                  "typeName": "Hash"
                }
              ],
              "name": "ContractNotLocked"
            },
            {
              "fields": [
                {
                  "type": 10,
                  "typeName": "AccountId"
                }
              ],
              "name": "InvalidClaimer"
            },
            {
              "fields": [
                {
                  "type": 10,
                  "typeName": "AccountId"
                }
              ],
              "name": "IncorrectSecret"
            },
            {
              "name": "RequiresOwner"
            },
            {
              "fields": [
                {
                  "type": 23,
                  "typeName": "multi_token::Error"
                }
              ],
              "name": "Erc20"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "Error"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidTokenStandard"
            },
            {
              "name": "BalanceRequired"
            },
            {
              "name": "TokenIdRequired"
            },
            {
              "name": "MetadataRequired"
            },
            {
              "fields": [
                {
                  "type": 24,
                  "typeName": "ink_prelude::string::String"
                }
              ],
              "name": "TokenNotFound"
            },
            {
              "fields": [
                {
                  "type": 25,
                  "typeName": "erc20::Error"
                }
              ],
              "name": "Erc20"
            },
            {
              "fields": [
                {
                  "type": 26,
                  "typeName": "erc721::Error"
                }
              ],
              "name": "Erc721"
            },
            {
              "fields": [
                {
                  "type": 27,
                  "typeName": "erc1155::Error"
                }
              ],
              "name": "Erc1155"
            }
          ]
        }
      },
      "path": [
        "multi_token",
        "Error"
      ]
    },
    {
      "def": {
        "primitive": "str"
      }
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "discriminant": 0,
              "name": "InsufficientBalance"
            },
            {
              "discriminant": 1,
              "name": "InsufficientAllowance"
            },
            {
              "discriminant": 2,
              "name": "ZeroAddressNotAllowed"
            },
            {
              "discriminant": 3,
              "name": "MissingRole"
            },
            {
              "discriminant": 4,
              "name": "TransfersPaused"
            }
          ]
        }
      },
      "path": [
        "erc20",
        "Error"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "discriminant": 0,
              "name": "CannotFetchValue"
            },
            {
              "discriminant": 1,
              "name": "TokenIdOverflow"
            },
            {
              "discriminant": 2,
              "name": "TokenNotFound"
            },
            {
              "discriminant": 3,
              "name": "NotOwner"
            },
            {
              "discriminant": 4,
              "name": "TokenExists"
            },
            {
              "discriminant": 5,
              "name": "NotAllowed"
            },
            {
              "discriminant": 6,
              "name": "NotApproved"
            },
            {
              "discriminant": 7,
              "name": "CannotInsert"
            },
            {
              "discriminant": 8,
              "name": "CannotRemove"
            }
          ]
        }
      },
      "path": [
        "erc721",
        "erc721",
        "Error"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "discriminant": 0,
              "name": "NotAllowed"
            },
            {
              "discriminant": 1,
              "name": "NotApproved"
            },
            {
              "discriminant": 2,
              "name": "TokenIdOverflow"
            },
            {
              "discriminant": 3,
              "name": "TokenNotFound"
            },
            {
              "discriminant": 4,
              "name": "NotOwner"
            },
            {
              "discriminant": 5,
              "name": "CannotFetchValue"
            },
            {
              "discriminant": 6,
              "name": "BurnAmountExceedsBalance"
            },
            {
              "discriminant": 7,
              "name": "InsufficientBalance"
            },
            {
              "discriminant": 8,
              "name": "ArraysLengthNotEqual"
            },
            {
              "discriminant": 9,
              "name": "CannotInsert"
            }
          ]
        }
      },
      "path": [
        "erc1155",
        "erc1155",
        "Error"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "contract_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "secret",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "input",
        "ClaimRequest"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "contract_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "secret_hash",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "input",
        "RefundRequest"
      ]
    },
    {
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None"
            },
            {
              "fields": [
                {
                  "type": 31,
                  "typeName": "T"
                }
              ],
              "name": "Some"
            }
          ]
        }
      },
      "params": [
        31
      ],
      "path": [
        "Option"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "secret_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "from",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "to",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "token",
              "type": 19,
              "typeName": "UniqueMultiTokenInfo"
            },
            {
              "name": "amount",
              "type": 16,
              "typeName": "Balance"
            },
            {
              "name": "time_lock",
              "type": 15,
              "typeName": "u64"
            },
            {
              "name": "locked",
              "type": 17,
              "typeName": "bool"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "output",
        "HTLContractOutput"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "from",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "to",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "amount",
              "type": 16,
              "typeName": "Balance"
            },
            {
              "name": "time_lock",
              "type": 15,
              "typeName": "u64"
            },
            {
              "name": "secret_hash",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "event_output",
        "InitHTLCEventOutput"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "contract_hash",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "event_output",
        "CreatedContractOutput"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "address",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "contract_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "secret",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "event_output",
        "ClaimFundsEventOutput"
      ]
    },
    {
      "def": {
        "composite": {
          "fields": [
            {
              "name": "address",
              "type": 10,
              "typeName": "AccountId"
            },
            {
              "name": "contract_hash",
              "type": 4,
              "typeName": "Hash"
            },
            {
              "name": "secret",
              "type": 4,
              "typeName": "Hash"
            }
          ]
        }
      },
      "path": [
        "htlc_atomic_swap",
        "model",
        "event_output",
        "RefundFundsEventOutput"
      ]
    }
  ]
}